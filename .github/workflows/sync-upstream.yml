name: Sync with Upstream

on:
  schedule:
    # Run every Sunday at 02:00 UTC (weekly)
    - cron: '0 2 * * 0'
  workflow_dispatch: # Allow manual triggering

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/openjdk/jdk.git || true
          git remote set-url upstream https://github.com/openjdk/jdk.git

      - name: Fetch upstream
        run: git fetch upstream

      - name: Check for updates
        id: check_updates
        run: |
          # Compare local master with upstream master
          LOCAL_COMMIT=$(git rev-parse origin/master)
          UPSTREAM_COMMIT=$(git rev-parse upstream/master)
          
          if [ "$LOCAL_COMMIT" != "$UPSTREAM_COMMIT" ]; then
            echo "updates_available=true" >> $GITHUB_OUTPUT
            echo "upstream_commit=$UPSTREAM_COMMIT" >> $GITHUB_OUTPUT
            echo "local_commit=$LOCAL_COMMIT" >> $GITHUB_OUTPUT
          else
            echo "updates_available=false" >> $GITHUB_OUTPUT
          fi

      - name: Create sync branch
        if: steps.check_updates.outputs.updates_available == 'true'
        run: |
          BRANCH_NAME="sync/upstream-$(date +%Y%m%d-%H%M%S)"
          echo "SYNC_BRANCH=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

      - name: Attempt merge
        if: steps.check_updates.outputs.updates_available == 'true'
        id: merge_attempt
        run: |
          # Try to merge upstream/master
          if git merge upstream/master --no-edit; then
            echo "merge_success=true" >> $GITHUB_OUTPUT
            echo "conflicts=false" >> $GITHUB_OUTPUT
          else
            echo "merge_success=false" >> $GITHUB_OUTPUT
            echo "conflicts=true" >> $GITHUB_OUTPUT
            # Reset to clean state
            git merge --abort
          fi

      - name: Check for actual changes
        if: steps.check_updates.outputs.updates_available == 'true' && steps.merge_attempt.outputs.merge_success == 'true'
        id: check_changes
        run: |
          # Check if there are any differences between sync branch and master
          if git diff --quiet origin/master; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "üìù No actual changes detected after merge (commits may have been already integrated)"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            # Count the number of changed files for reporting
            CHANGED_FILES=$(git diff --name-only origin/master | wc -l)
            echo "changed_files=$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "üìù Detected $CHANGED_FILES changed files"
          fi

      - name: Push sync branch (with changes)
        if: steps.check_updates.outputs.updates_available == 'true' && steps.merge_attempt.outputs.merge_success == 'true' && steps.check_changes.outputs.has_changes == 'true'
        run: |
          git push origin $SYNC_BRANCH

      - name: Create Pull Request (with changes)
        if: steps.check_updates.outputs.updates_available == 'true' && steps.merge_attempt.outputs.merge_success == 'true' && steps.check_changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Sync with upstream (${new Date().toISOString().split('T')[0]})`,
              head: process.env.SYNC_BRANCH,
              base: 'master',
              body: `## Automated Upstream Sync
              
              This PR contains updates from the upstream OpenJDK repository.
              
              **Upstream commit**: ${{ steps.check_updates.outputs.upstream_commit }}
              **Previous commit**: ${{ steps.check_updates.outputs.local_commit }}
              **Changed files**: ${{ steps.check_changes.outputs.changed_files }}
              
              ### Changes
              - Merged latest changes from upstream/master
              - Regression tests will run automatically
              
              **Note**: This PR was created automatically. Review the changes before merging.`,
              draft: false
            });
            
            // Add label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['upstream-sync', 'automated']
            });

      - name: Clean up sync branch (no changes)
        if: steps.check_updates.outputs.updates_available == 'true' && steps.merge_attempt.outputs.merge_success == 'true' && steps.check_changes.outputs.has_changes == 'false'
        run: |
          # Delete the sync branch since no changes were detected
          git checkout master
          git branch -D $SYNC_BRANCH
          echo "‚úÖ Upstream commits were already integrated - no PR needed"

      - name: Create conflict notification issue
        if: steps.check_updates.outputs.updates_available == 'true' && steps.merge_attempt.outputs.conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Check if there's already an open conflict issue
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'upstream-sync-conflict'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'üö® Upstream Sync Conflicts Detected',
                body: `## Merge Conflicts Detected
                
                The automated upstream sync has detected merge conflicts that require manual resolution.
                
                **Upstream commit**: ${{ steps.check_updates.outputs.upstream_commit }}
                **Current commit**: ${{ steps.check_updates.outputs.local_commit }}
                
                ### To resolve manually:
                
                1. **Clone and setup:**
                   \`\`\`bash
                   git clone ${{ github.server_url }}/${{ github.repository }}.git
                   cd ${{ github.event.repository.name }}
                   git remote add upstream https://github.com/openjdk/jdk.git
                   git fetch upstream
                   \`\`\`
                
                2. **Create conflict resolution branch:**
                   \`\`\`bash
                   git checkout -b sync/upstream-manual-$(date +%Y%m%d)
                   git merge upstream/master
                   \`\`\`
                
                3. **Resolve conflicts manually and commit:**
                   \`\`\`bash
                   # Edit conflicted files
                   git add .
                   git commit -m "Resolve upstream sync conflicts"
                   git push origin sync/upstream-manual-$(date +%Y%m%d)
                   \`\`\`
                
                4. **Create pull request** with the resolved changes
                
                5. **Close this issue** once the conflicts are resolved
                
                ---
                *This issue was created automatically by the upstream sync workflow.*`,
                labels: ['upstream-sync-conflict', 'manual-intervention-required']
              });
            }

      - name: Workflow summary
        if: always()
        run: |
          echo "=== Upstream Sync Summary ==="
          
          if [ "${{ steps.check_updates.outputs.updates_available }}" == "false" ]; then
            echo "‚úÖ Repository is already up to date with upstream"
            echo "   Local: ${{ steps.check_updates.outputs.local_commit }}"
            echo "   Upstream: ${{ steps.check_updates.outputs.upstream_commit }}"
            
          elif [ "${{ steps.merge_attempt.outputs.conflicts }}" == "true" ]; then
            echo "‚ö†Ô∏è  Merge conflicts detected - manual resolution required"
            echo "   A GitHub issue has been created with resolution steps"
            
          elif [ "${{ steps.check_changes.outputs.has_changes }}" == "false" ]; then
            echo "‚úÖ Upstream commits were already integrated - no changes to merge"
            echo "   This can happen when commits are cherry-picked or already merged"
            
          elif [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "‚úÖ Successfully created sync PR with ${{ steps.check_changes.outputs.changed_files }} changed files"
            echo "   Pull request created and tests will run automatically"
            
          else
            echo "‚ùì Unexpected workflow state - check the logs above"
          fi
          
          echo "=========================="
